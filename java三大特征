一个java类的完整的生命周期会经历 加载、连接、初始化、使用、卸载 五个阶段。


面向对象的三种特征：封装、继承、多态性。

封装：把过程和数据包围起来，对数据的访问只能通过已定义的接口。通过关键字private、protected和public实现封装。适量的封装可以让代码更容易理解和维护，
也加强了代码的安全性。
public class Man {    //对属性的封装，一个人的姓名，年龄都是这个对象的私有属性
  private String name;
  private int age;

//对该人对外界提供了方法的封装，可以设置其属性

  public void setName(String name){ this.name = name ;} 
//没有getName（），因为不想被外界访问

  public int getAge() {
　　return age;
　　}
　　public void setAge(int age) {
　　this.age = age;
　　}
}

继承：是从已有的类中派生新的类。新的类能吸收已有类的数据属性和行为，并扩展新的能力。新类可以增加新的数据或新的功能，也可以用父类的功能，
但不能选择性的继承父类。如：一个类叫车，车有以下属性：车体大小，颜色，方向盘，轮胎，而又由这个类派生出轿车和卡车两个类，为轿车添加一个小后备箱，
而为卡车添加一个大货箱。

注：java不支持多继承，一个类只能有一个父类，同时一个类可以实现多个接口（interface）。

好处：简化人们对事物的认识和描述，能清晰体现相关类间的层次结构关系
提供了软件复用功能，减小代码和数据的冗余度，大大增加程序的重用性。

class 子类 extends 父类{} 

- 静态方法:静态方法看父类 
- 非静态方法：非静态方法看子类

this表示当前正在初始化的对象引用
super表示调用父类中相应的属性和方法，若要在子类中调用父类的方法，需要使用关键字super.method();


为什么需要继承
开发动物类，其中动物分别为企鹅以及老鼠，要求如下：
企鹅：属性（姓名，id），方法（吃，睡，自我介绍）
老鼠：属性（姓名，id），方法（吃，睡，自我介绍）
企鹅类
public class Penguin { 
    private String name; 
    private int id; 
    public Penguin(String myName, int  myid) { 
        name = myName; 
        id = myid; 
    } 
    public void eat(){ 
        System.out.println(name+"正在吃"); 
    }
    public void sleep(){
        System.out.println(name+"正在睡");
    }
    public void introduction() { 
        System.out.println("大家好！我是"         + id + "号" + name + "."); 
    } 
}

老鼠类
public class Mouse { 
    private String name; 
    private int id; 
    public Mouse(String myName, int  myid) { 
        name = myName; 
        id = myid; 
    } 
    public void eat(){ 
        System.out.println(name+"正在吃"); 
    }
    public void sleep(){
        System.out.println(name+"正在睡");
    }
    public void introduction() { 
        System.out.println("大家好！我是"         + id + "号" + name + "."); 
    } 
}

公共父类：
public class Animal { 
    private String name;  
    private int id; 
    public Animal(String myName, int myid) { 
        name = myName; 
        id = myid;
    } 
    public void eat(){ 
        System.out.println(name+"正在吃"); 
    }
    public void sleep(){
        System.out.println(name+"正在睡");
    }
    public void introduction() { 
        System.out.println("大家好！我是"         + id + "号" + name + "."); 
    } 
}

企鹅类：
public class Penguin extends Animal { 
    public Penguin(String myName, int myid) { 
        super(myName, myid); 
    } 
}
老鼠类：
public class Mouse extends Animal { 
    public Mouse(String myName, int myid) { 
        super(myName, myid); 
    } 
}

特性：子类拥有父类非private的属性、方法。
子类可以拥有自己的属性和方法。
子类可以用自己的方式实现父类的方法
缺点：提高了类之间的耦合性（会造成代码之间的联系）


多态：同一行为具有多个不同表现形式或形态的能力。
就是同一个接口，使用不同的实例而执行不同操作。
打印机：彩色打印机、黑白打印机。打印效果是不一样的。
同一事件发生在不同的对象上会产生不同的效果。

优点：消除耦合性，灵活性，简化性，接口性、可替换性、可扩展性。

存在的三个必要条件：
继承，重写，父类引用指向子类对象

重写：子类对父类的允许访问的方法的实现过程进行重新编写，返回值和形参都不能改变。父类中没有的方法，子类会写了后，会抛出找不到方法的异常。  

class Animal{
   public void move(){
      System.out.println("动物可以移动");
   }
}
 
class Dog extends Animal{
   public void move(){
      System.out.println("狗可以跑和走");
   }
}
 
public class TestDog{
   public static void main(String args[]){
      Animal a = new Animal(); // Animal 对象
      Animal b = new Dog(); // Dog 对象
 
      a.move();// 执行 Animal 类的方法
 
      b.move();//执行 Dog 类的方法
   }
}
以上实例编译运行结果如下：
动物可以移动
狗可以跑和走
在上面的例子中可以看到，尽管b属于Animal类型，但是它运行的是Dog类的move方法。
这是由于在编译阶段，只是检查参数的引用类型。
然而在运行时，Java虚拟机(JVM)指定对象的类型并且运行该对象的方法。
因此在上面的例子中，之所以能编译成功，是因为Animal类中存在move方法，然而运行时，运行的是特定对象的方法
只能抛出子类异常。


重写的规则：

   1、重写方法的参数列表必须完全与被重写的方法的相同,否则不能称其为重写而是重载.
   2、重写方法的访问修饰符一定要大于被重写方法的访问修饰符（public>protected>default>private）。
   3、重写的方法的返回值必须和被重写的方法的返回一致；
   4、重写的方法所抛出的异常必须和被重写方法的所抛出的异常一致，或者是其子类；
   5、被重写的方法不能为private，否则在其子类中只是新定义了一个方法，并没有对其进行重写。
   6、静态方法不能被重写为非静态的方法（会编译出错）。



重载：
    在一个类里，方法名字相同，参数不同。
每个重载的方法都必须有一个唯一的参数类型列表。
只能重载构造函数。


方法重载 是让类以统一的方式处理不同类型数据的一种手段，多个同名函数同时存在，具有不同的参数个数/类型
是多态性的一种表现。
具有相同的名字，但具有不同的参数和不同的定义。调用方法时通过传递给他们的不同参数个数和参数类型来决定具体使用哪个方法，这就是多态性


public class A{  
   public A(){  
      System.out.println("调用了无参的构造函数");  
   }  
   public A(String mess){  
      System.out.println("调用了有参的构造函数\n"+  
         "参数内容为："+mess);  
   }  
}  

                  重写         和     重载的区别：
参数列表          一定不能修改         参数不同
是多态性的不同表现，重写是父类与子类之间多态性的一种表现，
重载是一种类中多态性的一种表现。


几种开发模式 
工厂模式：创建型
适配器、代理、桥接bridge、装饰器decorator、亨元模式。   结构型
命令、迭代器、中介者、观察者、策略、状态模式。  行为型

单例模式
publicstatic Singleton instance;
publicstatic Singleton getInstance(){
  if(instance == null){
   instance = new Singleton()
}
return instance
}



finally 表示这段语句最终总是被执行，无论是否抛出异常且一定执行.
