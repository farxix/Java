     一个多线程包含两个或多个能并发运行的部分。程序的每一部分都称作一个线程。多线程是多任务的一种特别的形式，但多线程使用了更小的资源开销。

进程：包含一个或多个线程。一个线程不能独立的存在，它必须是进程的一部分。

新建状态：使用new关键字和Thread类或其子类建立一个线程对象后。

就绪状态：当线程对象调用了start()方法之后，该进程就进入了就绪状态。
                            （线程阻塞，让出cpu资源）
运行状态：执行run(),可以变为阻塞、就绪、死亡状态（run()方法执行完成，可用stop与destroy函数强制终止）。


执行sleep wait方法，线程变成阻塞状态

实现多线程：实现Runnable接口，继承Thread类本身，通过Callable和future创建线程。


class RunnableDemo implements Runnable {
   private Thread t;  
   private String threadName;
   
   RunnableDemo( String name) {
      threadName = name;
      System.out.println("Creating " +  threadName );
   }
   
   public void run() {
      System.out.println("Running " +  threadName );
      try {
         for(int i = 4; i > 0; i--) {
            System.out.println("Thread: " + threadName + ", " + i);
            // 让线程睡眠一会
            Thread.sleep(50);
         }
      }catch (InterruptedException e) {
         System.out.println("Thread " +  threadName + " interrupted.");
      }
      System.out.println("Thread " +  threadName + " exiting.");
   }
   
   public void start () {
      System.out.println("Starting " +  threadName );
      if (t == null) {
         t = new Thread (this, threadName);
         t.start ();
      }
   }
}
 
public class TestThread {
 
   public static void main(String args[]) {
      RunnableDemo R1 = new RunnableDemo( "Thread-1");
      R1.start();
      
      RunnableDemo R2 = new RunnableDemo( "Thread-2");
      R2.start();
   }   
}


Java中的sleep()和wait的区别

sleep()是属于Thread类中的，wait()方法是属于Object类中的。调用sleep()方法的过程中，线程不会释放对象锁，是占的cpu去睡觉，其他线程不能占用cpu。
而wait()方法会放弃对象锁，进入等待池等待，让出系统资源，其他线程可以占用cpu。



死锁：两个或两个以上的进程在执行过程中，竞争资源或者彼此通信而造成的一种阻塞的现象，若无外力作用，他们都将无法推进下去。
如果线程A锁住了记录1并等待记录2，而线程B锁住了记录2并等待记录1，这样两个线程就发生了死锁现象。
