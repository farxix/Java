一．访问限定。  

1.public关键字: public的意思是公有的，public作为关键字可以放在类前，表示这个类可以被其他包中的类的对象所访问。

2.private关键字: private的意思是私有的，其可调用性范围最小。

3.protected关键字：protected限定符界于public和private之间。被protected限定的方法，子类可以继承，在同一个包内可以访问，在不同的包内不可以访问。 



二．类，方法和变量修饰符。

4、Static关键字：
    表示“全局”或者“静态”，用于修饰成员变量和成员方法，也可以形成静态static代码块，但是java中没有全局变量的概念。
被static修饰的成员变量和成员方法独立于该类的任何对象。不依赖类的实例，被类的所以实例共享。static对象可以在对象创建前访问，不需引用任何对象。
static 就是限定一个变量只能占用一个内存,这个内存是所有实例共享的
static修饰叫 静态变量或类变量。没有被修饰叫 实例变量。
区别：JVM只为静态分配一次内存。对于实例变量每创建一个实例，就分配一次内存。
静态方法不能用this和super。
static代码块，静态代码块。只能被执行一次。

5.final关键字：
		声明类可以把类定义为不能继承的，即最终类；
或者用于修饰方法，该方法不能被子类重写，可以继承。
final class 类名 {}
实例变量被定义final的变量不能被修改。（只能赋值一次，赋值后不再改变）
不能用于修饰构造方法


6.class关键字：class的作用就是用来声明一个类，且类名要与文件名相同。   
 
 
7.abstract关键字：
		可以修饰类或方法，可以增加子类，但不能直接实例化。
abstract方法不在声明它的类中实现，但必须在某个子类中重写
不能应用于static、privat、final方法，因为这些方法不能被重写。
有抽象方法的都是抽象类，但是抽象类中不一定都是抽象方法。 
 
 
8.interface关键字：interface的作用就是定义一个接口。接口中定义了一个没有任何方法体实现的方法，只要定义方法返回类型，方法名，参数表，不能有实现。接口是不能直接实例化一个对象的，必须要通过子类继承后重写方法来实现它。   
 
 
9.extends关键字：extends的作用就是继承类。用此关键词继承的子类，拥有了主类的方法和属性，不需要再把父类中所有的方法都写出来，只需要重写我们需要的方法。 一个类只能有一个父类。   
 
 
10.implements关键字：implements的作用就是继承接口。Implements与extends是不同的，实现类中，必须重写接口中定义的方法。 一个类可以实现多个接口。
 
 
11. native关键字： native的意思是本地的。  native 关键字可以应用于方法，以指示该方法是用 Java 以外的语言实现的。   


12.new关键字：new是新，创建的意思。 new 关键字用于创建类的新实例。  new 关键字后面的参数必须是类名，并且类名的后面必须是一组构造方法参数（必须带括号）。  例如：student st=new student(); 参数集合必须与类的构造方法的签名匹配。  = 左侧的变量的类型必须与要实例化的类或接口具有赋值兼容关系。


13. strictfp关键字：strictfp是严格,精准的意思。  strictfp的意思是FP-strict，也就是说精确浮点的意思。在Java虚拟机进行浮点运算时，如果没有指定strictfp关键字时，Java的编译器以及运行环境在对浮点运算的表达式是采取一种近似于我行我素的行为来完成这些操作，以致于得到的结果往往无法令人满意。而一旦使用了strictfp来声明一个类、接口或者方法时，那么所声明的范围内Java的编译器以及运行环境会完全依照浮点规范IEEE-754来执行。因此如果想让浮点运算更加精确，而且不会因为不同的硬件平台所执行的结果不一致的话，那就请用关键字strictfp。 可以将一个类、接口以及方法声明为strictfp，但是不允许对接口中的方法以及构造函数声明strictfp关键字   


14. synchronized关键字：synchronized是线程、同步的意思。  synchronized 关键字可以应用于方法或语句块，并为一次只应由一个线程执行的关键代码段提供保护。  synchronized 关键字可防止代码的关键代码段一次被多个线程执行。  如果应用于静态方法，那么，当该方法一次由一个线程执行时，整个类将被锁定。 如果应用于实例方法，那么，当该方法一次由一个线程访问时，该实例将被锁定。  如果应用于对象或数组，当关联的代码块一次由一个线程执行时，对象或数组将被锁定。


15. transient关键字：transient是短暂，瞬时的意思。 transient 关键字可以应用于类的成员变量，以便指出该成员变量不应在包含它的类实例已序列化时被序列化。  当一个对象被串行化的时候，transient型变量的值不包括在串行化的表示中，然而非transient型的变量是被包括进去的。  Java的serialization提供了一种持久化对象实例的机制。当持久化对象时，可能有一个特殊的对象数据成员，我们不想用serialization机制来保存它。为了在一个特定对象的一个域上关闭serialization，可以在这个域前加上关键字transient。      transient是Java语言的关键字，用来表示一个域不是该对象串行化的一部分。当一个对象被串行化的时候，transient型变量的值不包括在串行化的表示中，然而非transient型的变量是被包括进去的。   


16. volatile关键字：volatile是易失的意思。  volatile 关键字用于表示可以被多个线程异步修改的成员变量。  注意：volatile 关键字在许多 Java 虚拟机中都没有实现。 volatile 的目标用途是为了确保所有线程所看到的指定变量的值都是相同的。 Java 语言中的 volatile 变量可以被看作是一种 “程度较轻的 synchronized”；与 synchronized 块相比，volatile 变量所需的编码较少，并且运行时开销也较少，但是它所能实现的功能也仅是 synchronized 的一部分。


三．程序控制语句。  

17. break关键字：break的意识是 跳出，中断。  break 关键字用于提前退出 for、while 或 do 循环，或者在 switch 语句中用来结束 case 块。  break 总是退出最深层的 while、for、do 或 switch 语句。    


18.continue关键字：continu的意思是继续。  continue 关键字用来跳转到 for、while 或 do 循环的下一个迭代。 continue 总是跳到最深层 while、for 或 do 语句的下一个迭代。    


19．Return关键字：return的意思是返回。  return 关键字会导致方法返回到调用它的方法，从而传递与返回方法的返回类型匹配的值。  如果方法具有非 void 的返回类型，return 语句必须具有相同或兼容类型的参数。 返回值两侧的括号是可选的。    


20．Do关键字：do的意思是运行。  do 关键字用于指定一个在每次迭代结束时检查其条件的循环。 do 循环体至少执行一次。 条件表达式后面必须有分号。    


21．While关键字：while的意思是循环。  while 关键字用于指定一个只要条件为真就会重复的循环。    


22.if关键字：if的意思是如果。  if 关键字指示有条件地执行代码块。条件的计算结果必须是布尔值。  if 语句可以有可选的 else 子句，该子句包含条件为 false 时将执行的代码。 包含 boolean 操作数的表达式只能包含 boolean 操作数。    


23.else关键字：else的意思是否则。  else 关键字总是在 if-else 语句中与 if 关键字结合使用。else 子句是可选的，如果 if 条件为 false，则执行该子句。    

24.for关键字：for的意思是循环。  for 关键字用于指定一个在每次迭代结束前检查其条件的循环。  


25.instanceof关键字：instanceof的意思是实例 instanceof 关键字用来确定对象所属的类。    


26. switch关键字：switch的意思是观察。  switch 语句用于基于某个表达式选择执行多个代码块中的某一个。 switch 条件的计算结果必须等于 byte、char、short 或 int。 
case 块没有隐式结束点。break 语句通常在每个 case 块末尾使用，用于退出 switch 语句。  如果没有 break 语句，执行流将进入所有后面的 case 和/或 default 块。   


27. case关键字：case的意思是返回观察里的结果 case 用来标记 switch 语句中的每个分支。  case 块没有隐式结束点。break 语句通常在每个 case 块末尾使用，用于退出 switch 语句。  如果没有 break 语句，执行流将进入所有后面的 case 和/或 default 块。    


28. default关键字：default的意思是默认。  default 关键字用来标记 switch 语句中的默认分支。  default 块没有隐式结束点。break 语句通常在每个 case 或 default 块的末尾使用，以便在完成块时退出 switch 语句。  如果没有 default 语句，其参数与任何 case 块都不匹配的 switch 语句将不执行任何操作。


四．错误处理 

29.try关键字：try的意思是捕获异常。 try 关键字用于包含可能引发异常的语句块。  每个 try 块都必须至少有一个 catch 或 finally 子句。 如果某个特定异常类未被任何 catch 子句处理，该异常将沿着调用栈递归地传播到下一个封闭 try 块。如果任何封闭 try 块都未捕获到异常，Java 解释器将退出，并显示错误消息和堆栈跟踪信息。    


30.catch关键字：catch的意思是处理异常。  catch 关键字用来在 try-catch 或 try-catch-finally 语句中定义异常处理块。 开始和结束标记 { 和 } 是 catch 子句语法的一部分，即使该子句只包含一个语句，也不能省略这两个标记。  每个 try 块都必须至少有一个 catch 或 finally 子句。 如果某个特定异常类未被任何 catch 子句处理，该异常将沿着调用栈递归地传播到下一个封闭 try 块。如果任何封闭 try 块都未捕获到异常，Java 解释器将退出，并显示错误消息和堆栈跟踪信息。    


31.throw关键字：throw的意思是抛出一个异常对象。 throw 关键字用于引发异常。  throw 语句将 java.lang.Throwable 作为参数。Throwable 在调用栈中向上传播，直到被适当的 catch 块捕获。  引发非 RuntimeException 异常的任何方法还必须在方法声明中使用 throws 修饰符来声明它引发的异常。


32.throws关键字:throws的意思是声明一个异常可能被抛出。  throws 关键字可以应用于方法，以便指出方法引发了特定类型的异常。 throws 关键字将逗号分隔的 java.lang.Throwables 列表作为参数。  引发非 RuntimeException 异常的任何方法还必须在方法声明中使用 throws 修饰符来声明它引发的异常。  要在 try-catch 块中包含带 throws 子句的方法的调用，必须提供该方法的调用者。 


五．与包相关。  

33.Package关键字：Package是java程序中用来定义类的存放位置的关键字。 我们通常根据类的用途或其他的一些规则将某一组类放在同一种命名空间里。 Package可以由多级组成，在文件系统中，每一级则表示一个文件夹，在多级之间由.隔开。 而当我们要在另外一个包中要使用这个类时，就必须引入这个类或者写这个类的全限定名字。  


34.import关键字：import的作用是用来引入要使用的类。 java.lang包中的类可以不需要用import语句直接使用。


六．基本类型。  

35.boolean关键字：boolean是布尔型。  boolean 是 Java 原始类型。boolean 变量的值可以是 true 或 false。  boolean 变量只能以 true 或 false 作为值。boolean 不能与数字类型相互转换。 包含 boolean 操作数的表达式只能包含 boolean 操作数。 Boolean 类是 boolean 原始类型的包装对象类。    


36.byte关键字：byte是字节型。  byte 是 Java 原始类型。byte 可存储在 [-128, 127] 范围以内的整数值。  Byte 类是 byte 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。  Java 中的所有整数值都是 32 位的 int 值，除非值后面有 l 或 L（如 235L），这表示该值应解释为 long。  


37.char关键字：char是字符型。  char 是 Java 原始类型。char 变量可以存储一个 Unicode 字符。  可以使用下列 char 常量：\b - 空格, \f - 换页, \n - 换行, \r - 回车, \t - 水平制表符, \' - 单引号, \" - 双引号, \\ - 反斜杠, \xxx - 采用 xxx 编码的 Latin-1 字符。\x 和 \xx 均为合法形式，但可能引起混淆。 \uxxxx - 采用十六进制编码 xxxx 的 Unicode 字符。Character 类包含一些可用来处理 char 变量的 static 方法，这些方法包括 isDigit()、isLetter()、isWhitespace() 和 toUpperCase()。 
char 值没有符号。    


38.double关键字：double是双精度。  double 是 Java 原始类型。double 变量可以存储双精度浮点值。  由于浮点数据类型是实际数值的近似值，因此，一般不要对浮点数值进行是否相等的比较。 Java 浮点数值可代表无穷大和 NaN（非数值）。Double 包装对象类用来定义常量 MIN_VALUE、MAX_VALUE、NEGATIVE_INFINITY、POSITIVE_INFINITY 和 NaN。    


39，float关键字：float是浮点型。  float 是 Java 原始类型。float 变量可以存储单精度浮点值。 使用此关键字时应遵循下列规则：  Java 中的浮点文字始终默认为双精度。要指定单精度文字值，应在数值后加上 f 或 F，如 0.01f。  由于浮点数据类型是实际数值的近似值，因此，一般不要对浮点数值进行是否相等的比较。 Java 浮点数值可代表无穷大和 NaN（非数值）。Float 包装对象类用来定义常量 MIN_VALUE、MAX_VALUE、NEGATIVE_INFINITY、POSITIVE_INFINITY 和 NaN。    


40.int关键字：int是整型。  int 是 Java 原始类型。int 变量可以存储 32 位的整数值。  Integer 类是 int 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。  Java 中的所有整数值都是 32 位的 int 值，除非值后面有 l 或 L（如 235L），这表示该值应解释为 long。    


41. long关键字：long是长整型。  long 是 Java 原始类型。long 变量可以存储 64 位的带符号整数。  Long 类是 long 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。  Java 中的所有整数值都是 32 位的 int 值，除非值后面有 l 或 L（如 235L），这表示该值应解释为 long。    

42.short关键字：short是短整型。  short 是 Java 原始类型。short 变量可以存储 16 位带符号的整数。  Short 类是 short 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。  Java 中的所有整数值都是 32 位的 int 值，除非值后面有 l 或 L（如 235L），这表示该值应解释为 long。    


43. null关键字：null是空。  null 是 Java 的保留字，表示无值。  将 null 赋给非原始变量相当于释放该变量先前所引用的对象。  不能将 null 赋给原始类型（byte、short、int、long、char、float、double、boolean）变量。   


44.true关键字：true是真  true 关键字表示 boolean 变量的两个合法值中的一个。    

45.false关键字：false假。  false 关键字代表 boolean 变量的两个合法值之一。    


七．变量引用。  

46.super关键字：super是指的当前类的父类的对象。   


47.this关键字：this是指的当前对象。 调用当前对象的构造方法格式：this(参数); 调用当前对象的方法：this.方法名（）;  系统在创建一个子类对象时，同时也创建了父类的对象，此时，可以使用super关键字引用到父类的对象从而调用父类中的方法。  Super关键字还可以在子类的构造器时使用，通过super调用父类的构造器（其方法同this调用自己的构造器的方法一样）都必须在第一行，且只能在构造器中调用一次。


48. void 无返回值  void 关键字表示 null 类型。  void 可以用作方法的返回类型，以指示该方法不返回值。

八．保留字。  

1．Goto保留字：goto是跳转的意思。 
goto 保留关键字，但无任何作用。结构化程序设计完全不需要 goto 语句即可完成各种流程，而 goto 语句的使用往往会使程序的可读性降低，所以 Java 不允许 goto 跳转。    


2．Const保留字：const是静态的意思。 const 保留字，是一个类型修饰符，使用const声明的对象不能更新。与final某些类似. 
