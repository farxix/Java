集合有两类： list内的元素是有序的，元素可以重复。

set元素无序，不可重复。

都是单列集合，有一个共同的父接口collection。

map<key,value> 它是双列的集合 键值对存储，value是真正存储值得变量能重复，无序，key不能重复。

public class ListAndSetTest {  
  
    String string[]={"i","am","xiao","huang"};  
    public void listtest(){  
        List<String> list=new ArrayList<String>();  
        for(String s:string){  
            list.add(s);          
        }  
        for(int i=0;i<list.size();i++)  
        {  
            System.out.println("list的结果是："+list.get(i));              
        }  
    }  
    public void settest(){  
        Set<String> set=new HashSet<String>();  
        for(String s:string){  
            set.add(s);  
        }  
        Iterator iterator=set.iterator();  
        while(iterator.hasNext()){  
            System.out.println("set的输出结果是："+iterator.next());  
        }  
    }  
    public static void main(String[] args) {          
        new ListAndSetTest().listtest();  
        new ListAndSetTest().settest();  
    }  
  
}  

首先定义一个字符串类型的数组，分别用list和set方法依次取出数组中的值，然后打印出来

结果如下：

list的结果是：i  
list的结果是：am  
list的结果是：xiao  
list的结果是：huang  
set的输出结果是：am  
set的输出结果是：xiao  
set的输出结果是：huang  
set的输出结果是：i  
下面是map的示例：

public void maptest(){  
        Map<Integer, String> map=new HashMap<Integer, String>();  
        for(String s:string){  
            map.put(s.length(), s);  
            System.out.println("map的输出结果是："+map.get(s.length()));  
        }  
}  

这里写程序的时候要注意一个问题，就是来给string数组赋值的时候一定要保证每一个的长度都是不一样的，因为map中的key要求是不同。


list接口有三个实现类：处理序列
linkedlist：链表实现，链表增删快，查找，慢。
arraylist是线程非安全的，效率高，vector是线程安全的，低。


set有两个实现类：hashset（底层由hashmap实现），linkedhashset，处理集

Map：hashMap非线程安全，高效，支持null，hashTable线程安全，低效，不支持null；键值对。

hashMap 是非线程安全，异步，key、value可以为空,继承AbstractMap；
hashTable 是线程安全，同步，有contains()，继承Dictionary；


三者在执行速度方面的比较：StringBuilder >  StringBuffer  >  String
StringBuilder：线程非安全的

StringBuffer：线程安全的

对于三者使用的总结： 
1.如果要操作少量的数据用 = String
2.单线程操作字符串缓冲区 下操作大量数据 = StringBuilder
3.多线程操作字符串缓冲区 下操作大量数据 = StringBuffer

就是除了用StringBuffer.append()方法会改变值以外，
其他的通过方法调用的是改变不了值的。StringBuffer为什么可以呢？要从他的原理来讲，他是追加。到内容追加到对应的地址指向的内容中。


==比较的是对象的地址,也就是是否是同一个对象; equal比较的是对象的值。


整数类型byte short int long 浮点型 float double 字符型 char 布尔型 boolean
boolean Boolean  封装类
char Character
byte Byte
short Short
int Integer
long Long
float Float
double Double


Iterator中两个方法:

hasNext(),是判断当前元素是否存在，并指向下一个元素（即所谓的索引）；
next（），则是返回当前元素，并指向下一个元素。

Map的使用：
Map集合中提供了两种取出方式：

              <1>.  返回值类型Set<k>    方法是： keySet()   :返回此映射中包含的键的 Set 视图
                               将map中所有的键存入到Set集合，因为set具备迭代器，所有迭代方式取出所有的键
                               再根据get()方法  ，获取每一个键对应的值
              
              <2>.  返回值类型：Set<Map.Entry<K,V>>方法是：entrySet()
                             取出的是关系，关系中包含key和value,其中Map.Entry<k,V>来表示这种数据类型
                             即：将map集合中的映射关系存入到set集合中，这个关系的数据类型为:Map.Entry
                             
                             
 for (String s : map.keySet()) {
                System.out.print(map.get(s) + "  ");
            }
            
 for (Map.Entry<String, Object> m : map.entrySet()) {
                System.out.print(m.getKey() + "    ");
                System.out.println(m.getValue());
            }          


 List<Map<String, Object>> listMaps = new ArrayList<Map<String, Object>>();//存放map
        
        Map<String, Object> map1 = new HashMap<String, Object>();
        map1.put("1", "a");
        map1.put("2", "b");
        map1.put("3", "c");
        listMaps.add(map1);


